# -*- coding: utf-8 -*-
"""detection_from_scoreboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10b8E1_XQR5xNfs9btKqJiki0x7439YgF
"""

import numpy as np
import cv2
import pathlib
import joblib
from google.colab.patches import cv2_imshow

model = joblib.load('drive/My Drive/Processedvideo/ScoreboardExtractionmodel.sav')

def get_partition_columns(array,first,last):
    i=0
    while i<89:
      a=np.array(array[:,i])
      b=np.array(array[:,i+1])
      a_count= np.count_nonzero(a)
      b_count= np.count_nonzero(b)
      if a_count==0 and b_count!=0:
        first.append(i+1)
      if a_count!=0 and b_count==0:
        last.append(i)
      i=i+1

def load_images(array,first,last):
  i=0
  images=[]
  while i<len(first):
    temp=np.array(array[:,first[i]:last[i]+1])
    images.append(temp)
    i=i+1
  return images

def add_zero_columns(images):
  Images=[]
  for img in images:
    column_size=img.shape[0]
    column_to_be_added=np.zeros(column_size)
    count=0
    while count<5:
      count=count+1
      img=np.hstack((np.atleast_2d(column_to_be_added).T,img ))
      img=np.hstack((img,np.atleast_2d(column_to_be_added).T ))
    Images.append(img)
  return Images

def add_zero_rows(images,ones):
  Images=[]
  number=-1
  for img in images:
    number=number+1
    row_size=img.shape[1]
    if row_size<=8:
      ones[number]=1
    row_to_be_added=np.zeros(row_size)
    count=0
    while count<5:
      count=count+1
      img=np.vstack((row_to_be_added,img ))
      img=np.vstack((img,row_to_be_added))
    Images.append(img)
  return Images

def get_seperated_images(img,ones):
  first=[]
  last=[]
  img_array=np.array(img) #image to numpy array
  get_partition_columns(img_array,first,last)
  images=load_images(img_array,first,last)
  images=add_zero_rows(images,ones)
  images=add_zero_columns(images)
  return images

def get_processed_img(img_path):
  img = cv2.imread(img_path) #load the image
  img = cv2.resize(img, (1356,766))
  img = img[670:700, 280:370] #crop the scoreboard
  img = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 15) #remove noise 
  img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #grayscale conversion
  ret,img = cv2.threshold(img, 120, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU) #binarization
  cv2_imshow(img)
  return img

def get_predictions(img_path,img,n):
    img=cv2.resize(img,(28,28))
    path = pathlib.PurePath(img_path)
    folder=path.parent.name
    filename=path.name
    filename=filename.replace('.jpg','')
    filename=folder+'_frame'+filename+'_'+str(n)+'.jpg'
    cv2.imwrite(filename,img)
    image=cv2.imread(filename)
    image=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    image=np.reshape(image,(28,28,1))
    image = np.expand_dims(image, axis=0)
    predictions=model.predict(image)
    return np.argmax(predictions[0])

def get_wickets_and_score(img_path):
  img=cv2.imread(img_path)
  img=get_processed_img(img_path)
  ones=np.zeros(5)
  digit_images=get_seperated_images(img,ones)
  if len(digit_images)==0:
    data=np.array([-1,-1])
    return data
  wickets=get_predictions(img_path,digit_images[0],0)
  score=''
  i=2
  while i< len(digit_images):
    if ones[i]==1:
      score=score+'1'
    else:
      score=score+str(get_predictions(img_path,digit_images[i],i))
    i=i+1
  if ones[0]==1:
    wickets=1
  data=np.array([score,wickets])
  return data