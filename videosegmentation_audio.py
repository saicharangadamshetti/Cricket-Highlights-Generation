# -*- coding: utf-8 -*-
"""VideoSegmentation_audio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_TkRl3AcTGY-PiUPhhsonlQrw08mW55K
"""

import moviepy.editor as mp
import librosa 
import numpy as np
import IPython.display as ipd 
import matplotlib.pyplot as plt
import pandas as pd
from moviepy.editor import VideoFileClip, concatenate_videoclips

def build_dataframe(energy):
  df=pd.DataFrame(columns=['energy','start','end'])
  thresh=180
  row_index=0
  for i in range(len(energy)):
      value=energy[i]
      if(value>=thresh):
          i=np.where(energy == value)[0]
          df.loc[row_index,'energy']=value
          df.loc[row_index,'start']=i[0] * 5
          df.loc[row_index,'end']=(i[0]+1) * 5
          row_index= row_index + 1
   remove_redundant_chunks(df)

def remove_redundant_chunks(df):
  temp=[]
  i=0
  j=0
  n=len(df) - 2
  m=len(df) - 1
  while(i<=n):
      j=i+1
      while(j<=m):
          if(df['end'][i] == df['start'][j]):
              df.loc[i,'end'] = df.loc[j,'end']
              temp.append(j)
              j=j+1
          else:
              i=j
              break
  df.drop(temp,axis=0,inplace=True)
  df.reset_index(drop=True, inplace=True)
  i=0
  while i<len(df):
    df.loc[i,'start']=df.loc[i,'start']-5
    i=i+1
  load_clips(df)

def load_clips(df):
  start=np.array(df['start'])
  end=np.array(df['end'])
  for i in range(len(df)):   
      filename="drive/My Drive/Processedvideo/highlights/clip" + str(i+1) + ".mp4"
      clip=video.subclip(start[i],end[i])
      clip.write_videofile(filename)

if __name__ == '__main__':
  video=mp.VideoFileClip('drive/My Drive/Processedvideo/RequiredVideo.mp4')
  audio=video.audio
  filename='drive/My Drive/RequiredAudio.mp3' 
  audio.write_audiofile("drive/My Drive/RequiredAudio.mp3")
  x, sr = librosa.load(filename,sr=16000)
  max_slice=5 
  window_length = max_slice * sr
  energy = np.array([sum(abs(x[i:i+window_length]**2)) for i in range(0, len(x), window_length)])
  plt.hist(energy) 
  plt.show()
  build_dataframe(energy)